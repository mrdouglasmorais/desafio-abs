{"version":3,"sources":["nav/styled.js","nav/index.js","banner/styled.js","banner/index.js","App.js","serviceWorker.js","index.js","img/logo.png"],"names":["DIV","styled","div","LogoPage","img","MainDefault","nav","UL","ul","A","a","NavBar","src","Logo","alt","PrimaryBanner","Banner","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"goCAEO,IAAMA,EAAMC,IAAOC,IAAV,KAOHC,EAAWF,IAAOG,IAAV,KAKRC,EAAcJ,IAAOK,IAAV,KAIXC,EAAKN,IAAOO,GAAV,KAMFC,EAAIR,IAAOS,EAAV,KCJCC,MAhBf,WACE,OACI,kBAACN,EAAD,KACE,kBAACE,EAAD,KACE,kBAACJ,EAAD,CAAUS,IAAKC,IAAMC,IAAI,SACvB,kBAACd,EAAD,KACE,kBAACS,EAAD,cACA,kBAACA,EAAD,kBACA,kBAACA,EAAD,+BACA,kBAACA,EAAD,yB,+PCVP,IAAMM,EAAgBd,IAAOC,IAAV,KCQXc,MARf,WACE,OACE,6BACE,kBAACD,EAAD,QCOSE,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.1034c03f.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const DIV = styled.div`\n  backgroud: #CECECE;\n  text-decoration: none;\n  padding: 20px;\n  cursor: pointer;\n`\n\nexport const LogoPage = styled.img`\n  width: 250px;\n  heigth: auto;\n`\n\nexport const MainDefault = styled.nav`\n  display: flex;\n`\n\nexport const UL = styled.ul`\n  text-decoration: none;\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n`\nexport const A = styled.a`\n  @import url('https://fonts.googleapis.com/css?family=Montserrat:400,500,600,700&display=swap');\n  font-family: 'Montserrat';\n  font-weight: 700;\n  color: #3980c2;\n  text-decoration: none;\n  padding: 20px;\n  cursor: pointer;\n  margin-top: 20px;\n  font-size: 15px;\n\n  :hover {\n  color: #10ccff;\n  }\n`\n","import React from 'react'\nimport Logo from '../img/logo.png'\nimport { LogoPage, MainDefault, A, UL, DIV } from './styled'\n\nfunction NavBar() {\n  return (\n      <MainDefault>\n        <UL>\n          <LogoPage src={Logo} alt='Logo'/>\n            <DIV>\n              <A>SOBRE</A>\n              <A>PARCERIAS</A>\n              <A>PRÓX. EDIÇÕES</A>\n              <A>FALE CONOSCO</A>\n            </DIV>\n        </UL>\n      </MainDefault>\n  )\n}\n\nexport default NavBar;\n","import styled from 'styled-components';\n\n\nexport const PrimaryBanner = styled.div`\n  background-image: url(https://www.eldorado.org.br/wp-content/uploads/2017/05/landing-bg.jpg);\n  background-size: auto;\n  border: 1px solid #000;\n  width: 100%;\n  height: 600px;\n`","import React from 'react'\nimport { PrimaryBanner } from './styled'\n\nfunction Banner() {\n  return (\n    <div>\n      <PrimaryBanner />\n    </div>\n  )\n}\n\nexport default Banner;\n","import React from 'react';\nimport NavBar from './nav'\nimport Banner from './banner'\n\nfunction App() {\n  return (\n    <>\n      <NavBar />\n      <Banner />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.3ee938d0.png\";"],"sourceRoot":""}